function inferlatentgplvmvar_photo(U, B, S, R; iterations = 1000, repeats = 10, seed = 1) 

    @show Q = length(R[:Z][:,1]) # dimension of latent space
    @show T = size(U,1)
    @show J, D = size(B)
    @assert(size(U,2) == size(B,1))
    @assert(size(U) == size(S))

    # assign relevant quantities

    K      = R[:K]
    Œõroot  = R[:Œõroot]
    b      = R[:b]
    Œº      = R[:Œº]
    # Œ£      = R[:Œ£]
    Œ∑      = R[:Œ∑]
    net    = R[:net]
    w      = R[:w]
    Z      = R[:Z]
    Œ∏      = R[:Œ∏]
    JITTER = R[:JITTER]
    # Œ≤      = R[:ùõÉ][1]

    rg = MersenneTwister(seed)


    # pre-calculate
    
    inv_K_plus_Œõ‚Åª¬π = aux_invert_K_plus_Œõ‚Åª¬π(K=K, Œõroot=Œõroot)

    inv_K_mul_Œº = K\Œº'

    # use the same unpacking function like GPLVM‚Çä

    unpack(p) = unpack_inferlatent_gplvmplus(p ; Q = Q, N‚Çä = T, w = w, net = net)

    function loss(Z‚Çä, ŒΩ, Lroot)

        @assert(size(ŒΩ,2) == T)
        @assert(size(ŒΩ,1) == D)

        # use same function like GPLVM‚Çä
        # return partial log-likelihood composed of sum of log-prior contribution, entropy, penalty on latent coordinates

        local ‚Ñì, A = partial_objective(Z‚Çä, ŒΩ, Lroot; Z = Z, Œ∏ = Œ∏, JITTER = JITTER, Œ∑ = Œ∑, D = D, inv_K_plus_Œõ‚Åª¬π = inv_K_plus_Œõ‚Åª¬π, inv_K_mul_Œº = inv_K_mul_Œº)

        # log-likelihood contribution

        for j in 1:J, t in 1:T
            
            aux = sum(B[j,:] .* (ŒΩ[:,t] .+ b))
            
            ‚Ñì += logpdf(Normal(aux, S[t,j]), U[t,j])

        end

        for j in 1:J, t in 1:T, d in 1:D

            ‚Ñì += - (1/(2*S[t,j]^2) * B[j,d]^2 * A[t,t])

        end

        return ‚Ñì

      
    end

    
    opt = Optim.Options(show_trace = true, show_every = 1, iterations = iterations)

    objective(p) = -loss(unpack(p)...)

    
    function getsolution()
        
        luckyindex = ceil(Int, rand(rg) * size(R[:Z],2)) # pick a random coordinate as starting point for optimisation
     
        init = optimize(objective, [Z[:,luckyindex]; randn(rg, T)], NelderMead(), opt).minimizer

        optimize(objective, init, ConjugateGradient(), opt, autodiff=:forward)

    end


    solutions = [getsolution() for _ in 1:repeats]

    bestindex = argmin([s.minimum for s in solutions])

    
    return unpack(solutions[bestindex].minimizer)[1]

end