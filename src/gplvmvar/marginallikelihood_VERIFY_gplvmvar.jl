function marginallikelihood_VERIFY_gplvmvar(X, Z, Œ∏, ùõÉ, Œº, Œõroot, w, b; JITTER = JITTER, Œ∑ = Œ∑)
    
    # sort out dimensions

    local N = size(Z, 2)

    local D = size(Œº, 1); @assert(size(Œº, 2) == N)


    # calculate prior and posterior covariance matrices K and Œ£

    local D¬≤ = pairwise(SqEuclidean(), Z)

    local K  = Symmetric(covariance(D¬≤, Œ∏) + JITTER*I)

    local Œ£  = aux_invert_K‚Åª¬π_plus_Œõ(;K = K, Œõroot = Œõroot) + JITTER*I


    # accummulate here marginal log likelihood

    local ‚Ñì = zero(eltype(Z))


    # contribution of prior

    for d in 1:D
        
        ‚Ñì += logpdf(MvNormal(zeros(N), K), Œº[d,:]) - 0.5*tr(K\Œ£)

    end
    

    # contribution of likelihood

    for d in 1:D
        
        for n in 1:N

            ‚Ñì += logpdf(Normal(Œº[d,n] + b, 1/sqrt(ùõÉ[d,n])), X[d,n])

        end

        ‚Ñì += - 0.5*tr(Diagonal(ùõÉ[d,:])*Œ£)

    end

  
    # entropy contribution

    ‚Ñì += D * Distributions.entropy(MvNormal(zeros(N), Œ£))
        
    
    return ‚Ñì - 0.5*Œ∑*sum(abs2.(Z)) - 0.5*Œ∑*sum(abs2.(w))# penalty on latent coordinates and network weights
    
end
    