function unpack_gplvmplus(p, ::Missing, D, N, net, Q)

    nwts = ForwardNeuralNetworks.numweights(net)
    
    @assert(length(p) == Q*N + 1 + 1 + nwts + N + 2)

    MARK = 0

    Z = reshape(p[MARK+1:MARK+Q*N], Q, N); MARK += Q*N

    Œ∏ = exp(p[MARK+1]); MARK += 1

    Œ≤ = exp(p[MARK+1]); MARK += 1

    w = p[MARK+1:MARK+nwts]; MARK += nwts

    Œõroot = Diagonal(p[MARK+1:MARK+N]); MARK += N

    Œ± = exp(p[MARK+1]); MARK += 1

    b = p[MARK+1]; MARK += 1

    @assert(MARK == length(p))

    Œº = net(w, Z)
    
    return Z, [one(eltype(p));Œ∏], Fill(Œ≤, D, N), Œº, Œõroot, w, Œ±, b

end



function unpack_gplvmplus(p, ùõÉ, D, N, net, Q)

    nwts = ForwardNeuralNetworks.numweights(net)
    
    @assert(length(p) == Q*N + 1 + nwts + N + 2)

    MARK = 0

    Z = reshape(p[MARK+1:MARK+Q*N], Q, N); MARK += Q*N

    Œ∏ = exp(p[MARK+1]); MARK += 1

    w = p[MARK+1:MARK+nwts]; MARK += nwts

    Œõroot = Diagonal(p[MARK+1:MARK+N]); MARK += N

    Œ± = exp(p[MARK+1]); MARK += 1

    b = p[MARK+1]; MARK += 1

    @assert(MARK == length(p))

    Œº = net(w, Z)
    
    return Z, [one(eltype(p));Œ∏], ùõÉ, Œº, Œõroot, w, Œ±, b

end
